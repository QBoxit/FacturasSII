'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5446
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSetFactura"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSetFactura
    Inherits Global.System.Data.DataSet
    
    Private tableDataTableItemFactura As DataTableItemFacturaDataTable
    
    Private tableDataTableDatosFact As DataTableDatosFactDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DataTableItemFactura")) Is Nothing) Then
                MyBase.Tables.Add(New DataTableItemFacturaDataTable(ds.Tables("DataTableItemFactura")))
            End If
            If (Not (ds.Tables("DataTableDatosFact")) Is Nothing) Then
                MyBase.Tables.Add(New DataTableDatosFactDataTable(ds.Tables("DataTableDatosFact")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DataTableItemFactura() As DataTableItemFacturaDataTable
        Get
            Return Me.tableDataTableItemFactura
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DataTableDatosFact() As DataTableDatosFactDataTable
        Get
            Return Me.tableDataTableDatosFact
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSetFactura = CType(MyBase.Clone,DataSetFactura)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("DataTableItemFactura")) Is Nothing) Then
                MyBase.Tables.Add(New DataTableItemFacturaDataTable(ds.Tables("DataTableItemFactura")))
            End If
            If (Not (ds.Tables("DataTableDatosFact")) Is Nothing) Then
                MyBase.Tables.Add(New DataTableDatosFactDataTable(ds.Tables("DataTableDatosFact")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableDataTableItemFactura = CType(MyBase.Tables("DataTableItemFactura"),DataTableItemFacturaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDataTableItemFactura) Is Nothing) Then
                Me.tableDataTableItemFactura.InitVars
            End If
        End If
        Me.tableDataTableDatosFact = CType(MyBase.Tables("DataTableDatosFact"),DataTableDatosFactDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDataTableDatosFact) Is Nothing) Then
                Me.tableDataTableDatosFact.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSetFactura"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSetFactura.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableDataTableItemFactura = New DataTableItemFacturaDataTable
        MyBase.Tables.Add(Me.tableDataTableItemFactura)
        Me.tableDataTableDatosFact = New DataTableDatosFactDataTable
        MyBase.Tables.Add(Me.tableDataTableDatosFact)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDataTableItemFactura() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDataTableDatosFact() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSetFactura = New DataSetFactura
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub DataTableItemFacturaRowChangeEventHandler(ByVal sender As Object, ByVal e As DataTableItemFacturaRowChangeEvent)
    
    Public Delegate Sub DataTableDatosFactRowChangeEventHandler(ByVal sender As Object, ByVal e As DataTableDatosFactRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DataTableItemFacturaDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnfactItem As Global.System.Data.DataColumn
        
        Private columnfactCodigo As Global.System.Data.DataColumn
        
        Private columnfactDetalla As Global.System.Data.DataColumn
        
        Private columnfactCantidad As Global.System.Data.DataColumn
        
        Private columnfactPrecioUnitario As Global.System.Data.DataColumn
        
        Private columnfactPrecioTotal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DataTableItemFactura"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property factItemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfactItem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property factCodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfactCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property factDetallaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfactDetalla
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property factCantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfactCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property factPrecioUnitarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfactPrecioUnitario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property factPrecioTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfactPrecioTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DataTableItemFacturaRow
            Get
                Return CType(Me.Rows(index),DataTableItemFacturaRow)
            End Get
        End Property
        
        Public Event DataTableItemFacturaRowChanging As DataTableItemFacturaRowChangeEventHandler
        
        Public Event DataTableItemFacturaRowChanged As DataTableItemFacturaRowChangeEventHandler
        
        Public Event DataTableItemFacturaRowDeleting As DataTableItemFacturaRowChangeEventHandler
        
        Public Event DataTableItemFacturaRowDeleted As DataTableItemFacturaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDataTableItemFacturaRow(ByVal row As DataTableItemFacturaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDataTableItemFacturaRow(ByVal factItem As String, ByVal factCodigo As String, ByVal factDetalla As String, ByVal factCantidad As String, ByVal factPrecioUnitario As String, ByVal factPrecioTotal As String) As DataTableItemFacturaRow
            Dim rowDataTableItemFacturaRow As DataTableItemFacturaRow = CType(Me.NewRow,DataTableItemFacturaRow)
            Dim columnValuesArray() As Object = New Object() {factItem, factCodigo, factDetalla, factCantidad, factPrecioUnitario, factPrecioTotal}
            rowDataTableItemFacturaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDataTableItemFacturaRow)
            Return rowDataTableItemFacturaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DataTableItemFacturaDataTable = CType(MyBase.Clone,DataTableItemFacturaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DataTableItemFacturaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnfactItem = MyBase.Columns("factItem")
            Me.columnfactCodigo = MyBase.Columns("factCodigo")
            Me.columnfactDetalla = MyBase.Columns("factDetalla")
            Me.columnfactCantidad = MyBase.Columns("factCantidad")
            Me.columnfactPrecioUnitario = MyBase.Columns("factPrecioUnitario")
            Me.columnfactPrecioTotal = MyBase.Columns("factPrecioTotal")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnfactItem = New Global.System.Data.DataColumn("factItem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfactItem)
            Me.columnfactCodigo = New Global.System.Data.DataColumn("factCodigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfactCodigo)
            Me.columnfactDetalla = New Global.System.Data.DataColumn("factDetalla", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfactDetalla)
            Me.columnfactCantidad = New Global.System.Data.DataColumn("factCantidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfactCantidad)
            Me.columnfactPrecioUnitario = New Global.System.Data.DataColumn("factPrecioUnitario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfactPrecioUnitario)
            Me.columnfactPrecioTotal = New Global.System.Data.DataColumn("factPrecioTotal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfactPrecioTotal)
            Me.columnfactItem.AllowDBNull = false
            Me.columnfactCodigo.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDataTableItemFacturaRow() As DataTableItemFacturaRow
            Return CType(Me.NewRow,DataTableItemFacturaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DataTableItemFacturaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DataTableItemFacturaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DataTableItemFacturaRowChangedEvent) Is Nothing) Then
                RaiseEvent DataTableItemFacturaRowChanged(Me, New DataTableItemFacturaRowChangeEvent(CType(e.Row,DataTableItemFacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DataTableItemFacturaRowChangingEvent) Is Nothing) Then
                RaiseEvent DataTableItemFacturaRowChanging(Me, New DataTableItemFacturaRowChangeEvent(CType(e.Row,DataTableItemFacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DataTableItemFacturaRowDeletedEvent) Is Nothing) Then
                RaiseEvent DataTableItemFacturaRowDeleted(Me, New DataTableItemFacturaRowChangeEvent(CType(e.Row,DataTableItemFacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DataTableItemFacturaRowDeletingEvent) Is Nothing) Then
                RaiseEvent DataTableItemFacturaRowDeleting(Me, New DataTableItemFacturaRowChangeEvent(CType(e.Row,DataTableItemFacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDataTableItemFacturaRow(ByVal row As DataTableItemFacturaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetFactura = New DataSetFactura
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DataTableItemFacturaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DataTableDatosFactDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnColumnNombre As Global.System.Data.DataColumn
        
        Private columnColumnDireccion As Global.System.Data.DataColumn
        
        Private columnColumnGiro As Global.System.Data.DataColumn
        
        Private columnColumnRut As Global.System.Data.DataColumn
        
        Private columnColumnComuna As Global.System.Data.DataColumn
        
        Private columnColumnTelefono As Global.System.Data.DataColumn
        
        Private columnColumnNumeroFactura As Global.System.Data.DataColumn
        
        Private columnColumnGuiaDespacho As Global.System.Data.DataColumn
        
        Private columnColumnOrdenCompra As Global.System.Data.DataColumn
        
        Private columnColumnCondVenta As Global.System.Data.DataColumn
        
        Private columnColumnNeto As Global.System.Data.DataColumn
        
        Private columnColumnIva As Global.System.Data.DataColumn
        
        Private columnColumnTotal As Global.System.Data.DataColumn
        
        Private columnColumnDia As Global.System.Data.DataColumn
        
        Private columnColumnMes As Global.System.Data.DataColumn
        
        Private columnColumnAño As Global.System.Data.DataColumn
        
        Private columnColumnVendedor As Global.System.Data.DataColumn
        
        Private columnColumnTotalNumero As Global.System.Data.DataColumn
        
        Private columnFcedible As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DataTableDatosFact"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColumnNombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColumnDireccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnDireccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColumnGiroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnGiro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColumnRutColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnRut
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColumnComunaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnComuna
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColumnTelefonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnTelefono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColumnNumeroFacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnNumeroFactura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColumnGuiaDespachoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnGuiaDespacho
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColumnOrdenCompraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnOrdenCompra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColumnCondVentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnCondVenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColumnNetoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnNeto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColumnIvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnIva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColumnTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColumnDiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnDia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColumnMesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnMes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColumnAñoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnAño
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColumnVendedorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnVendedor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColumnTotalNumeroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnTotalNumero
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FcedibleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFcedible
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DataTableDatosFactRow
            Get
                Return CType(Me.Rows(index),DataTableDatosFactRow)
            End Get
        End Property
        
        Public Event DataTableDatosFactRowChanging As DataTableDatosFactRowChangeEventHandler
        
        Public Event DataTableDatosFactRowChanged As DataTableDatosFactRowChangeEventHandler
        
        Public Event DataTableDatosFactRowDeleting As DataTableDatosFactRowChangeEventHandler
        
        Public Event DataTableDatosFactRowDeleted As DataTableDatosFactRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDataTableDatosFactRow(ByVal row As DataTableDatosFactRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDataTableDatosFactRow( _
                    ByVal ColumnNombre As String,  _
                    ByVal ColumnDireccion As String,  _
                    ByVal ColumnGiro As String,  _
                    ByVal ColumnRut As String,  _
                    ByVal ColumnComuna As String,  _
                    ByVal ColumnTelefono As String,  _
                    ByVal ColumnNumeroFactura As String,  _
                    ByVal ColumnGuiaDespacho As String,  _
                    ByVal ColumnOrdenCompra As String,  _
                    ByVal ColumnCondVenta As String,  _
                    ByVal ColumnNeto As String,  _
                    ByVal ColumnIva As String,  _
                    ByVal ColumnTotal As String,  _
                    ByVal ColumnDia As String,  _
                    ByVal ColumnMes As String,  _
                    ByVal ColumnAño As String,  _
                    ByVal ColumnVendedor As String,  _
                    ByVal ColumnTotalNumero As String,  _
                    ByVal Fcedible As String) As DataTableDatosFactRow
            Dim rowDataTableDatosFactRow As DataTableDatosFactRow = CType(Me.NewRow,DataTableDatosFactRow)
            Dim columnValuesArray() As Object = New Object() {ColumnNombre, ColumnDireccion, ColumnGiro, ColumnRut, ColumnComuna, ColumnTelefono, ColumnNumeroFactura, ColumnGuiaDespacho, ColumnOrdenCompra, ColumnCondVenta, ColumnNeto, ColumnIva, ColumnTotal, ColumnDia, ColumnMes, ColumnAño, ColumnVendedor, ColumnTotalNumero, Fcedible}
            rowDataTableDatosFactRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDataTableDatosFactRow)
            Return rowDataTableDatosFactRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByColumnRut(ByVal ColumnRut As String) As DataTableDatosFactRow
            Return CType(Me.Rows.Find(New Object() {ColumnRut}),DataTableDatosFactRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DataTableDatosFactDataTable = CType(MyBase.Clone,DataTableDatosFactDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DataTableDatosFactDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnColumnNombre = MyBase.Columns("ColumnNombre")
            Me.columnColumnDireccion = MyBase.Columns("ColumnDireccion")
            Me.columnColumnGiro = MyBase.Columns("ColumnGiro")
            Me.columnColumnRut = MyBase.Columns("ColumnRut")
            Me.columnColumnComuna = MyBase.Columns("ColumnComuna")
            Me.columnColumnTelefono = MyBase.Columns("ColumnTelefono")
            Me.columnColumnNumeroFactura = MyBase.Columns("ColumnNumeroFactura")
            Me.columnColumnGuiaDespacho = MyBase.Columns("ColumnGuiaDespacho")
            Me.columnColumnOrdenCompra = MyBase.Columns("ColumnOrdenCompra")
            Me.columnColumnCondVenta = MyBase.Columns("ColumnCondVenta")
            Me.columnColumnNeto = MyBase.Columns("ColumnNeto")
            Me.columnColumnIva = MyBase.Columns("ColumnIva")
            Me.columnColumnTotal = MyBase.Columns("ColumnTotal")
            Me.columnColumnDia = MyBase.Columns("ColumnDia")
            Me.columnColumnMes = MyBase.Columns("ColumnMes")
            Me.columnColumnAño = MyBase.Columns("ColumnAño")
            Me.columnColumnVendedor = MyBase.Columns("ColumnVendedor")
            Me.columnColumnTotalNumero = MyBase.Columns("ColumnTotalNumero")
            Me.columnFcedible = MyBase.Columns("Fcedible")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnColumnNombre = New Global.System.Data.DataColumn("ColumnNombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnNombre)
            Me.columnColumnDireccion = New Global.System.Data.DataColumn("ColumnDireccion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnDireccion)
            Me.columnColumnGiro = New Global.System.Data.DataColumn("ColumnGiro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnGiro)
            Me.columnColumnRut = New Global.System.Data.DataColumn("ColumnRut", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnRut)
            Me.columnColumnComuna = New Global.System.Data.DataColumn("ColumnComuna", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnComuna)
            Me.columnColumnTelefono = New Global.System.Data.DataColumn("ColumnTelefono", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnTelefono)
            Me.columnColumnNumeroFactura = New Global.System.Data.DataColumn("ColumnNumeroFactura", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnNumeroFactura)
            Me.columnColumnGuiaDespacho = New Global.System.Data.DataColumn("ColumnGuiaDespacho", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnGuiaDespacho)
            Me.columnColumnOrdenCompra = New Global.System.Data.DataColumn("ColumnOrdenCompra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnOrdenCompra)
            Me.columnColumnCondVenta = New Global.System.Data.DataColumn("ColumnCondVenta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnCondVenta)
            Me.columnColumnNeto = New Global.System.Data.DataColumn("ColumnNeto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnNeto)
            Me.columnColumnIva = New Global.System.Data.DataColumn("ColumnIva", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnIva)
            Me.columnColumnTotal = New Global.System.Data.DataColumn("ColumnTotal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnTotal)
            Me.columnColumnDia = New Global.System.Data.DataColumn("ColumnDia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnDia)
            Me.columnColumnMes = New Global.System.Data.DataColumn("ColumnMes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnMes)
            Me.columnColumnAño = New Global.System.Data.DataColumn("ColumnAño", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnAño)
            Me.columnColumnVendedor = New Global.System.Data.DataColumn("ColumnVendedor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnVendedor)
            Me.columnColumnTotalNumero = New Global.System.Data.DataColumn("ColumnTotalNumero", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnTotalNumero)
            Me.columnFcedible = New Global.System.Data.DataColumn("Fcedible", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFcedible)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("DataTableDatosFactKey1", New Global.System.Data.DataColumn() {Me.columnColumnRut}, true))
            Me.columnColumnRut.AllowDBNull = false
            Me.columnColumnRut.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDataTableDatosFactRow() As DataTableDatosFactRow
            Return CType(Me.NewRow,DataTableDatosFactRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DataTableDatosFactRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DataTableDatosFactRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DataTableDatosFactRowChangedEvent) Is Nothing) Then
                RaiseEvent DataTableDatosFactRowChanged(Me, New DataTableDatosFactRowChangeEvent(CType(e.Row,DataTableDatosFactRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DataTableDatosFactRowChangingEvent) Is Nothing) Then
                RaiseEvent DataTableDatosFactRowChanging(Me, New DataTableDatosFactRowChangeEvent(CType(e.Row,DataTableDatosFactRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DataTableDatosFactRowDeletedEvent) Is Nothing) Then
                RaiseEvent DataTableDatosFactRowDeleted(Me, New DataTableDatosFactRowChangeEvent(CType(e.Row,DataTableDatosFactRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DataTableDatosFactRowDeletingEvent) Is Nothing) Then
                RaiseEvent DataTableDatosFactRowDeleting(Me, New DataTableDatosFactRowChangeEvent(CType(e.Row,DataTableDatosFactRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDataTableDatosFactRow(ByVal row As DataTableDatosFactRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetFactura = New DataSetFactura
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DataTableDatosFactDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DataTableItemFacturaRow
        Inherits Global.System.Data.DataRow
        
        Private tableDataTableItemFactura As DataTableItemFacturaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDataTableItemFactura = CType(Me.Table,DataTableItemFacturaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property factItem() As String
            Get
                Return CType(Me(Me.tableDataTableItemFactura.factItemColumn),String)
            End Get
            Set
                Me(Me.tableDataTableItemFactura.factItemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property factCodigo() As String
            Get
                Return CType(Me(Me.tableDataTableItemFactura.factCodigoColumn),String)
            End Get
            Set
                Me(Me.tableDataTableItemFactura.factCodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property factDetalla() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTableItemFactura.factDetallaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'factDetalla' in table 'DataTableItemFactura' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTableItemFactura.factDetallaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property factCantidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTableItemFactura.factCantidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'factCantidad' in table 'DataTableItemFactura' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTableItemFactura.factCantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property factPrecioUnitario() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTableItemFactura.factPrecioUnitarioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'factPrecioUnitario' in table 'DataTableItemFactura' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTableItemFactura.factPrecioUnitarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property factPrecioTotal() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTableItemFactura.factPrecioTotalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'factPrecioTotal' in table 'DataTableItemFactura' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTableItemFactura.factPrecioTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfactDetallaNull() As Boolean
            Return Me.IsNull(Me.tableDataTableItemFactura.factDetallaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfactDetallaNull()
            Me(Me.tableDataTableItemFactura.factDetallaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfactCantidadNull() As Boolean
            Return Me.IsNull(Me.tableDataTableItemFactura.factCantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfactCantidadNull()
            Me(Me.tableDataTableItemFactura.factCantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfactPrecioUnitarioNull() As Boolean
            Return Me.IsNull(Me.tableDataTableItemFactura.factPrecioUnitarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfactPrecioUnitarioNull()
            Me(Me.tableDataTableItemFactura.factPrecioUnitarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfactPrecioTotalNull() As Boolean
            Return Me.IsNull(Me.tableDataTableItemFactura.factPrecioTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfactPrecioTotalNull()
            Me(Me.tableDataTableItemFactura.factPrecioTotalColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DataTableDatosFactRow
        Inherits Global.System.Data.DataRow
        
        Private tableDataTableDatosFact As DataTableDatosFactDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDataTableDatosFact = CType(Me.Table,DataTableDatosFactDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ColumnNombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTableDatosFact.ColumnNombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnNombre' in table 'DataTableDatosFact' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTableDatosFact.ColumnNombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ColumnDireccion() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTableDatosFact.ColumnDireccionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnDireccion' in table 'DataTableDatosFact' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTableDatosFact.ColumnDireccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ColumnGiro() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTableDatosFact.ColumnGiroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnGiro' in table 'DataTableDatosFact' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTableDatosFact.ColumnGiroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ColumnRut() As String
            Get
                Return CType(Me(Me.tableDataTableDatosFact.ColumnRutColumn),String)
            End Get
            Set
                Me(Me.tableDataTableDatosFact.ColumnRutColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ColumnComuna() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTableDatosFact.ColumnComunaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnComuna' in table 'DataTableDatosFact' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTableDatosFact.ColumnComunaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ColumnTelefono() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTableDatosFact.ColumnTelefonoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnTelefono' in table 'DataTableDatosFact' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTableDatosFact.ColumnTelefonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ColumnNumeroFactura() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTableDatosFact.ColumnNumeroFacturaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnNumeroFactura' in table 'DataTableDatosFact' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTableDatosFact.ColumnNumeroFacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ColumnGuiaDespacho() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTableDatosFact.ColumnGuiaDespachoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnGuiaDespacho' in table 'DataTableDatosFact' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTableDatosFact.ColumnGuiaDespachoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ColumnOrdenCompra() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTableDatosFact.ColumnOrdenCompraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnOrdenCompra' in table 'DataTableDatosFact' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTableDatosFact.ColumnOrdenCompraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ColumnCondVenta() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTableDatosFact.ColumnCondVentaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnCondVenta' in table 'DataTableDatosFact' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTableDatosFact.ColumnCondVentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ColumnNeto() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTableDatosFact.ColumnNetoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnNeto' in table 'DataTableDatosFact' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTableDatosFact.ColumnNetoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ColumnIva() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTableDatosFact.ColumnIvaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnIva' in table 'DataTableDatosFact' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTableDatosFact.ColumnIvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ColumnTotal() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTableDatosFact.ColumnTotalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnTotal' in table 'DataTableDatosFact' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTableDatosFact.ColumnTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ColumnDia() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTableDatosFact.ColumnDiaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnDia' in table 'DataTableDatosFact' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTableDatosFact.ColumnDiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ColumnMes() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTableDatosFact.ColumnMesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnMes' in table 'DataTableDatosFact' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTableDatosFact.ColumnMesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ColumnAño() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTableDatosFact.ColumnAñoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnAño' in table 'DataTableDatosFact' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTableDatosFact.ColumnAñoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ColumnVendedor() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTableDatosFact.ColumnVendedorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnVendedor' in table 'DataTableDatosFact' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTableDatosFact.ColumnVendedorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ColumnTotalNumero() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTableDatosFact.ColumnTotalNumeroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnTotalNumero' in table 'DataTableDatosFact' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTableDatosFact.ColumnTotalNumeroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fcedible() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTableDatosFact.FcedibleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fcedible' in table 'DataTableDatosFact' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTableDatosFact.FcedibleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumnNombreNull() As Boolean
            Return Me.IsNull(Me.tableDataTableDatosFact.ColumnNombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumnNombreNull()
            Me(Me.tableDataTableDatosFact.ColumnNombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumnDireccionNull() As Boolean
            Return Me.IsNull(Me.tableDataTableDatosFact.ColumnDireccionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumnDireccionNull()
            Me(Me.tableDataTableDatosFact.ColumnDireccionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumnGiroNull() As Boolean
            Return Me.IsNull(Me.tableDataTableDatosFact.ColumnGiroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumnGiroNull()
            Me(Me.tableDataTableDatosFact.ColumnGiroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumnComunaNull() As Boolean
            Return Me.IsNull(Me.tableDataTableDatosFact.ColumnComunaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumnComunaNull()
            Me(Me.tableDataTableDatosFact.ColumnComunaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumnTelefonoNull() As Boolean
            Return Me.IsNull(Me.tableDataTableDatosFact.ColumnTelefonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumnTelefonoNull()
            Me(Me.tableDataTableDatosFact.ColumnTelefonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumnNumeroFacturaNull() As Boolean
            Return Me.IsNull(Me.tableDataTableDatosFact.ColumnNumeroFacturaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumnNumeroFacturaNull()
            Me(Me.tableDataTableDatosFact.ColumnNumeroFacturaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumnGuiaDespachoNull() As Boolean
            Return Me.IsNull(Me.tableDataTableDatosFact.ColumnGuiaDespachoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumnGuiaDespachoNull()
            Me(Me.tableDataTableDatosFact.ColumnGuiaDespachoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumnOrdenCompraNull() As Boolean
            Return Me.IsNull(Me.tableDataTableDatosFact.ColumnOrdenCompraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumnOrdenCompraNull()
            Me(Me.tableDataTableDatosFact.ColumnOrdenCompraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumnCondVentaNull() As Boolean
            Return Me.IsNull(Me.tableDataTableDatosFact.ColumnCondVentaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumnCondVentaNull()
            Me(Me.tableDataTableDatosFact.ColumnCondVentaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumnNetoNull() As Boolean
            Return Me.IsNull(Me.tableDataTableDatosFact.ColumnNetoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumnNetoNull()
            Me(Me.tableDataTableDatosFact.ColumnNetoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumnIvaNull() As Boolean
            Return Me.IsNull(Me.tableDataTableDatosFact.ColumnIvaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumnIvaNull()
            Me(Me.tableDataTableDatosFact.ColumnIvaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumnTotalNull() As Boolean
            Return Me.IsNull(Me.tableDataTableDatosFact.ColumnTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumnTotalNull()
            Me(Me.tableDataTableDatosFact.ColumnTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumnDiaNull() As Boolean
            Return Me.IsNull(Me.tableDataTableDatosFact.ColumnDiaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumnDiaNull()
            Me(Me.tableDataTableDatosFact.ColumnDiaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumnMesNull() As Boolean
            Return Me.IsNull(Me.tableDataTableDatosFact.ColumnMesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumnMesNull()
            Me(Me.tableDataTableDatosFact.ColumnMesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumnAñoNull() As Boolean
            Return Me.IsNull(Me.tableDataTableDatosFact.ColumnAñoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumnAñoNull()
            Me(Me.tableDataTableDatosFact.ColumnAñoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumnVendedorNull() As Boolean
            Return Me.IsNull(Me.tableDataTableDatosFact.ColumnVendedorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumnVendedorNull()
            Me(Me.tableDataTableDatosFact.ColumnVendedorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumnTotalNumeroNull() As Boolean
            Return Me.IsNull(Me.tableDataTableDatosFact.ColumnTotalNumeroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumnTotalNumeroNull()
            Me(Me.tableDataTableDatosFact.ColumnTotalNumeroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFcedibleNull() As Boolean
            Return Me.IsNull(Me.tableDataTableDatosFact.FcedibleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFcedibleNull()
            Me(Me.tableDataTableDatosFact.FcedibleColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DataTableItemFacturaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DataTableItemFacturaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DataTableItemFacturaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DataTableItemFacturaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DataTableDatosFactRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DataTableDatosFactRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DataTableDatosFactRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DataTableDatosFactRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
